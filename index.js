import Fastify from 'fastify';
import WebSocket from 'ws';
import dotenv from 'dotenv';
import fastifyFormBody from '@fastify/formbody';
import fastifyWs from '@fastify/websocket';
import twilio from 'twilio';

dotenv.config();

const {
  TWILIO_ACCOUNT_SID,
  TWILIO_AUTH_TOKEN,
  PHONE_NUMBER_FROM,
  DOMAIN: rawDomain,
  OPENAI_API_KEY,
  API_KEY,
} = process.env;

const INTRO_TEXT = `Bonjour, je suis Emilie de LeguichetPro. Est-ce que vous avez un instant ? Je souhaiterais vous parler du label Expert Pro, qui valorise les professionnels reconnus et vous donne acc√®s √† des services d√©di√©s.`;

const DOMAIN = rawDomain.replace(/(^\w+:|^)\/\//, '').replace(/\/+\$/, '');
const VOICE = 'alloy';
const PORT = process.env.PORT || 6060;
const SYSTEM_MESSAGE = `
Tu es un assistant vocal professionnel, f√©minin, pr√©nomm√©e Emilie. Tu appelles un professionnel pour lui pr√©senter le label Expert PRO, lanc√© par Le Guichet Pro : le guichet unique des entreprises, d√©j√† utilis√© par plus de 100 000 professionnels en France.

Le Guichet Pro aide les entreprises √† se d√©velopper via la g√©n√©ration de leads, l‚Äôaccompagnement, et des services comme la conciergerie ou les achats pros. Le label Expert PRO r√©f√©rence uniquement des professionnels, et les met en avant aupr√®s d‚Äôautres professionnels de leur secteur. Il permet d‚Äô√™tre reconnu comme l‚Äôexpert r√©f√©rent dans sa zone, d‚Äôattirer plus de clients professionnels qualifi√©s et de gagner en cr√©dibilit√©.

L‚Äôobjectif de ton appel est d‚Äôouvrir la discussion, puis de proposer d‚Äôenvoyer un lien par WhatsApp ou email pour que le prospect puisse v√©rifier en quelques secondes s'il reste des places pour rejoindre le label. Tu ne vends rien, tu proposes un premier pas.

Important : Commence toujours chaque appel par la phrase suivante, mot pour mot, sans jamais rien ajouter, ni changer, ni omettre. Attends d‚Äôavoir fini la phrase avant d‚Äô√©couter l‚Äôautre personne.
Lis exactement : "${INTRO_TEXT}"

Adopte un ton naturel, chaleureux, enthousiaste, positif et professionnel. Parle rapidement mais articule, marque des pauses naturelles, ta voix doit √™tre fluide et naturelle pas robotique du tout. Apr√®s la phrase d‚Äôintro, attends la r√©ponse de ton interlocuteur avant de poursuivre.`;

const outboundTwiML = `<?xml version="1.0" encoding="UTF-8"?>
<Response>
  <Connect>
    <Stream url="wss://${DOMAIN}/media-stream" />
  </Connect>
</Response>`;

const client = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);
const fastify = Fastify();
fastify.register(fastifyFormBody);
fastify.register(fastifyWs);

fastify.post('/call', async (req, reply) => {
  const to = req.body?.to;
  const token = req.headers.authorization || req.body.api_key;
  if (!to) return reply.status(400).send({ error: 'Missing "to"' });
  if (API_KEY && token !== `Bearer ${API_KEY}` && token !== API_KEY)
    return reply.status(401).send({ error: 'Unauthorized' });
  try {
    const call = await client.calls.create({ from: PHONE_NUMBER_FROM, to, twiml: outboundTwiML });
    return { message: 'Call initiated', sid: call.sid };
  } catch (err) {
    console.error('Call error:', err);
    return reply.status(500).send({ error: 'Call failed', details: err.message });
  }
});

fastify.register(async function (fastify) {
  fastify.get('/media-stream', { websocket: true }, (connection) => {
    console.log('‚úÖ Twilio stream connected');

    const openAiWs = new WebSocket('wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01', {
      headers: {
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        'OpenAI-Beta': 'realtime=v1',
      },
    });

    let streamSid = null;
    let latestMediaTimestamp = 0;
    let lastAssistantItem = null;
    let markQueue = [];
    let responseStartTimestampTwilio = null;
    const audioQueue = [];
    let openAiReady = false;

    const flushAudioQueue = () => {
      while (audioQueue.length > 0 && openAiWs.readyState === WebSocket.OPEN) {
        const payload = audioQueue.shift();
        openAiWs.send(JSON.stringify({
          type: 'input_audio_buffer.append',
          audio: payload,
        }));
      }
    };

    const handleSpeechStartedEvent = () => {
      if (markQueue.length > 0 && responseStartTimestampTwilio != null && lastAssistantItem) {
        const elapsedTime = latestMediaTimestamp - responseStartTimestampTwilio;
        openAiWs.send(JSON.stringify({
          type: 'conversation.item.truncate',
          item_id: lastAssistantItem,
          content_index: 0,
          audio_end_ms: elapsedTime,
        }));
        connection.send(JSON.stringify({ event: 'clear', streamSid }));
        markQueue = [];
        lastAssistantItem = null;
        responseStartTimestampTwilio = null;
      }
    };

    openAiWs.on('open', () => {
      console.log('‚úÖ OpenAI connected');
      openAiReady = true;
      openAiWs.send(JSON.stringify({
        type: 'session.update',
        session: {
          turn_detection: { type: 'server_vad' },
          input_audio_format: 'g711_ulaw',
          output_audio_format: 'g711_ulaw',
          voice: VOICE,
          instructions: SYSTEM_MESSAGE,
          modalities: ['audio', 'text'],
        },
      }));
      openAiWs.send(JSON.stringify({ type: 'response.create' }));
      flushAudioQueue();
    });

    openAiWs.on('message', (data) => {
      try {
        const msg = JSON.parse(data);
        if (msg.type === 'response.audio.delta' && msg.delta) {
          connection.send(JSON.stringify({ event: 'media', streamSid, media: { payload: msg.delta } }));
          if (!responseStartTimestampTwilio) {
            responseStartTimestampTwilio = latestMediaTimestamp;
          }
          if (msg.item_id) lastAssistantItem = msg.item_id;
          markQueue.push('responsePart');
        } else if (msg.type === 'input_audio_buffer.speech_started') {
          handleSpeechStartedEvent();
        } else if (msg.type === 'mark') {
          markQueue.shift();
        }
      } catch (err) {
        console.error('Error OpenAI -> Twilio:', err);
      }
    });

    connection.on('message', (msg) => {
      try {
        const data = JSON.parse(msg);
        if (data.event === 'start') {
          streamSid = data.start.streamSid;
          responseStartTimestampTwilio = null;
          latestMediaTimestamp = 0;
        } else if (data.event === 'media' && data.media?.payload) {
          latestMediaTimestamp = data.media.timestamp;
          if (openAiWs.readyState === WebSocket.OPEN) {
            openAiWs.send(JSON.stringify({
              type: 'input_audio_buffer.append',
              audio: data.media.payload,
            }));
          } else {
            audioQueue.push(data.media.payload);
          }
        }
      } catch (err) {
        console.error('Error Twilio -> OpenAI:', err);
      }
    });

    connection.on('close', () => {
      if (openAiWs.readyState === WebSocket.OPEN) openAiWs.close();
      console.log('‚õîÔ∏è Twilio stream closed');
    });

    openAiWs.on('error', (e) => console.error('OpenAI WebSocket error:', e));
    openAiWs.on('close', () => console.log('üîí OpenAI WebSocket closed'));
  });
});

fastify.listen({ port: PORT, host: '0.0.0.0' }, (err) => {
  if (err) {
    console.error('‚ùå Server error:', err);
    process.exit(1);
  }
  console.log(`üöÄ Server listening on port ${PORT}`);
});
